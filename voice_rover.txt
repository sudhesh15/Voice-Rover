 
#include <ESP8266WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#define WLAN_SSID       "dan"             // Your SSID
#define WLAN_PASS       "11111111"        // Your password
/************************* Adafruit.io Setup *********************************/
#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "holla111"            // Replace it with your username
#define AIO_KEY         "aio_idxS36ByX8r8ZIFETvJoBbh9sDQT"   // Replace with your Project Auth Key
// Create an ESP8266 WiFiClient class to connect to the MQTT server.
#define front
#define back
#define right
#define left

#define rightmotorfront D1  
#define rightmotorback D2  
#define leftmotorfront D5
#define leftmotorback D6
  char state;
  int vSpeed=255;  


WiFiClient client;


// or... use WiFiFlientSecure for SSL
//WiFiClientSecure client;
// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);
/****************************** Feeds ***************************************/
// Setup a feed called 'onoff' for subscribing to changes.
Adafruit_MQTT_Subscribe Light1 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME"/feeds/front"); // FeedName
Adafruit_MQTT_Subscribe Light2 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME"/feeds/back"); // FeedName
Adafruit_MQTT_Subscribe Light3 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME"/feeds/right"); // FeedName
Adafruit_MQTT_Subscribe Light4 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME"/feeds/left"); // FeedName

void setup() {

    pinMode(rightmotorfront, OUTPUT);
    pinMode(rightmotorback, OUTPUT);
    pinMode(leftmotorfront, OUTPUT);
    pinMode(leftmotorback, OUTPUT);

  Serial.begin(115200);

  
  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);
  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("WiFi connected");
  Serial.println("IP address: "); 
  Serial.println(WiFi.localIP());
  // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&Light1);
  mqtt.subscribe(&Light2);
  mqtt.subscribe(&Light3);
  mqtt.subscribe(&Light4);
}
void loop() {
  MQTT_connect();
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(20000))) {
    if (subscription == &Light1) {
      Serial.print(F("Got: "));
      Serial.println((char *)Light1.lastread);
      int Light1_State = atoi((char *)Light1.lastread);
      Serial.println(Light1_State);
      //digitalWrite(lights, Light1_State); 
      //Serial.println("moving forward");
      if(Light1_State==1)
      {
      forward();
      Serial.println("moving forward");
      }
      else if(Light1_State==0)
      {
        freez();
        Serial.println("stops");
        }
      
    }
    if (subscription == &Light2) {
      Serial.print(F("Got: "));
      Serial.println((char *)Light1.lastread);
      int Light2_State = atoi((char *)Light2.lastread);
      //digitalWrite(lights2, Light2_State);
      Serial.println(Light2_State);
      if(Light2_State==1)
      {
      backwards();
      
       Serial.println("moving backward");
      
      }
      else if(Light2_State==0)
      {
        freez();
        Serial.println("stops");
        }
  }
  if (subscription == &Light3) {
      Serial.print(F("Got: "));
      Serial.println((char *)Light3.lastread);
      int Light3_State = atoi((char *)Light3.lastread);
      //digitalWrite(lights3, Light3_State); 
       if(Light3_State==1)
      {
      moveright();
      delay(2000);
        forward();
       Serial.println("moving right");
      
      }
      else if(Light3_State==0)
      {
        freez();
        Serial.println("stops");
        }
      
  }


  if (subscription == &Light4) {
      Serial.print(F("Got: "));
      Serial.println((char *)Light4.lastread);
      int Light4_State = atoi((char *)Light4.lastread);
      //digitalWrite(lights4 , Light4_State); 
        if(Light4_State==1)
      {
       
        moveleft();
        delay(2000);
        forward();
       Serial.println("moving left");
      
      }
      else if(Light4_State==0)
      {
        freez();
        Serial.println("stops");
        }
  }
  

  }
  
}



void MQTT_connect() {
  int8_t ret;
  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }
  Serial.print("Connecting to MQTT... ");
  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
    Serial.println(mqtt.connectErrorString(ret));
    Serial.println("Retrying MQTT connection in 5 seconds...");
    mqtt.disconnect();
    delay(5000);  // wait 5 seconds
    retries--;
    if (retries == 0) {
      // basically die and wait for WDT to reset me
      while (1);
    }
  }
  Serial.println("MQTT Connected!");
}

void forward(){
analogWrite(rightmotorfront, 255);
        analogWrite(rightmotorback, 0);
        analogWrite(leftmotorfront, 255);   
        analogWrite(leftmotorback, 0); 
  Serial.println("kj");
}

void backwards(){
  analogWrite(rightmotorfront, 0);  
        analogWrite(rightmotorback,255 ); 
        analogWrite(leftmotorfront, 0); 
        analogWrite(leftmotorback, 255); 


}
void moveleft(){
  analogWrite(rightmotorfront, vSpeed); 
        analogWrite(rightmotorback, 0);  
        analogWrite(leftmotorfront, 0);
        analogWrite(leftmotorback, (vSpeed-160)); 

}
void moveright()
{
          analogWrite(rightmotorfront, 0);
        analogWrite(rightmotorback, (vSpeed-160)); 
        analogWrite(leftmotorfront, vSpeed);   
        analogWrite(leftmotorback, 0); 

}
void freez()
{
          analogWrite(rightmotorfront, 0);
        analogWrite(rightmotorback, 0); 
        analogWrite(leftmotorfront, 0);   
        analogWrite(leftmotorback, 0); 

}
